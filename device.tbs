include "global.tbh"



sub close_interface_sockets(interface as pl_sock_interfaces)
    dim f,sock_num_bup as byte
    dim i as word
    
    sock_num_bup=sock.num
    
    for f=0 to sock.numofsock-1
        sock.num=f
        if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED then
            sock.discard
        end if
    next f

    i=sys.timercount

wait_close_interface_sockets:
    for f=0 to sock.numofsock-1
        sock.num=f
        if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED and sys.timercount-i<3 and sys.timercount>=i then
            goto wait_close_interface_sockets
        end if
    next f

    sock.num=sock_num_bup
    
end sub
            

sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
'This callback function is executed everytime before any settings is being read. User can manipulate the value of the settings by changing 'stg_value'.
    select case stg_name_or_num
	case "STG":
		stg_value="Assign values from external source. Please see callback_stg_pre_get() in device.tbs."
	case else:
		
	end select
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
    
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub
sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)
    
    if interface=PL_SOCK_INTERFACE_WLN then
        if renew=YES and wln.ip<>ip then
            'this is a lease renewal and the DHCP server has issues new IP
            'it is better to reboot than deal with the implications of the changed IP
            sys.reboot
        end if
        
        #if DEV_DEBUG_PRINT
            dev_debugprint("Wi-Fi DHCP OK ("+ip+")")
        #endif
        
        if wln.ip<>ip then
            sock.inconenabledmaster=NO
            close_interface_sockets(PL_SOCK_INTERFACE_WLN)
            wln.ip=ip
            if gateway_ip<>"" then wln.gatewayip=gateway_ip
            if netmask<>"" then wln.netmask=netmask
            sock.inconenabledmaster=YES
            
            sys.debugprint("wifi ip is " + wln.ip + "\r\n")
			stg_set("WI",0,ip)
			stg_set("WN",0,netmask)
			stg_set("WG",0,gateway_ip)			
        end if
    end if
                

    if interface=PL_SOCK_INTERFACE_NET then
        if renew=YES and net.ip<>ip then
            'this is a lease renewal and the DHCP server has issues new IP
            'it is better to reboot than deal with the implications of the changed IP
            sys.reboot
        end if

        #if DEV_DEBUG_PRINT
            dev_debugprint("Ethernet DHCP OK ("+ip+")")
        #endif

        if net.ip<>ip then
            sock.inconenabledmaster=NO
            close_interface_sockets(PL_SOCK_INTERFACE_NET)
            net.ip=ip
            if gateway_ip<>"" then net.gatewayip=gateway_ip
            if netmask<>"" then net.netmask=netmask
            sock.inconenabledmaster=YES
			stg_set("IP",0,ip)
			stg_set("NM",0,netmask)
			stg_set("GI",0,gateway_ip)
        end if
		sys.debugprint("go to http://" + net.ip + "/index.html in the browser to see the home page\r\n")		
    end if
            

end sub
        
sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)
    
end sub
        
sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
    
end sub
        
sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
    
end sub
        
sub callback_dhcp_buff_released()
    
end sub
        
sub callback_wln_failure(wln_state as en_wln_status_codes)
    
end sub
        
sub callback_wln_ok()

end sub

sub callback_wln_starting_association()
    
end sub
        
sub callback_wln_pre_buffrq(required_buff_pages as byte)
    
end sub
        
sub callback_wln_mkey_progress_update(progress as byte)
    
end sub
        
sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
    
end sub
        
sub callback_wln_rescan_for_better_ap()
    
end sub

            
sub callback_luis_bt_connected()
    
end sub
        
sub callback_luis_bt_disconnected()
    
end sub
        
sub callback_luis_bt_enabled()
    
end sub
        
sub callback_luis_bt_disabled()
    
end sub
        
sub callback_luis_buzz_command()
    
end sub
        
public function device_setting_init(init_mode as en_stg_init_modes) as ok_ng

	pat.play(PAT_BOTH_OFF,PL_PAT_CANINT)
	if stg_restore_multiple(init_mode)<>EN_STG_STATUS_OK then
		pat.play(PAT_LONG_RED,PL_PAT_CANINT)
		beep.play(BEEP_LONG,PL_BEEP_CANINT)
		device_setting_init=NG
	else
		pat.play(PAT_LONG_GREEN,PL_PAT_CANINT)
		beep.play(BEEP_SHORT,PL_BEEP_CANINT)
		device_setting_init=OK
	end if

end function		